; ========================================================== ;
;                                                            ;
; Supporting library for IAS subject labs                    ;
;                                                            ;
; Version: 				v0.2                                 ;
; Date:					2014-11-22                           ;
; Author: 				Martin Zamba (izamba@fit.vutbr.cz)   ;
; Based on code by: 	Filip Orsag (orsag@fit.vutbr.cz)     ;
;                                                            ;
; ========================================================== ; 

bits 32
cpu X64

global _start

; C Run-Time libraray functions - msvcrt.dll:
extern printf
extern _putch
extern ExitProcess

; ========================================================== ; 
;                           Macros                           ;
; ========================================================== ; 

%macro prologue 0
	_start:

	call WriteNewLine 
%endmacro

%macro epilogue 0
	xor eax,eax
	push dword 0
	call ExitProcess
	ret
%endmacro

%macro string 2+
	%1: DB %2
	endof.%1: DB 0
	lenof.%1 EQU endof.%1 - %1
	sizeof.%1 EQU endof.%1 - %1
%endmacro

; ========================================================== ; 
;                          Constants                         ;
; ========================================================== ; 

%define EOL 10
%define MAX_UBYTE 0xFF
%define MAX_UWORD 0xFFFF
%define MAX_UDWORD 0xFFFFFFFF
%define MAX_STRING_LENGTH 1024

; ========================================================== ; 
;                          Variables                         ;
; ========================================================== ; 
[section .data use32 class=DATA align=4]

string msg_EOL, EOL
string msg_EnterChar, 'Test test: ... !!!'

format_char:		db "%c",0
format_string:		db "%s",0
format_int:			db "%d",0
format_uint:		db "%u",0
format_float:		db "%f",0
msg_Flags:			db 'Flags: |OF|DF|IF|TF|SF|ZF|--|AF|--|PF|--|CF|',EOL,'       | '
msg_FlagValues:		db          'x| x| x| x| x| x| x| x| x| x| x| x|',EOL, 0
ioBuffer:			times MAX_STRING_LENGTH db '!'
					db 0
					
; ========================================================== ; 
;                         Functions                          ;
; ========================================================== ; 

[section .libIAS use32 class=CODE]

;----------------------------------------
; WriteChar
; Will print a characer stored in AL register
;
;----------------------------------------
WriteChar:

	push eax
	push ecx
	push edx
	
	movzx ecx,al
	push ecx
	push format_char
	call printf
	add esp,8
	
	pop edx
	pop ecx
	pop eax

	ret


;----------------------------------------
; WriteNewLine
; Will print EndOfLine ASCII LF = 10
;
;----------------------------------------
WriteNewLine:

	push eax
	push ecx
	push edx
	
    push msg_EOL    
    call printf
	add esp,4

	pop edx
	pop ecx
	pop eax
	
	ret

;----------------
; WriteString
; Will print null-terminated string (string followed by 0)
; String address must be stored in ESI register 
;
;----------------------------------------
WriteString:

	push eax
	push ecx
	push edx

	push esi
	push format_string
	call printf
	add esp,8
	
	pop edx
	pop ecx
	pop eax
	
    ret
    
;----------------
; Function WriteBinX (8, 16, 32) {WriteBin8, WriteBin16, WriteBin32}
; will write 8,16,32 bits from EAX register 
;
WriteBin8:
    pushfd
    push ecx
    push eax

    mov ecx,8
    rcl eax,24
    jmp WriteBin

WriteBin16:
	pushfd
    push ecx
    push eax

    mov ecx,16
    rcl eax,16
    jmp WriteBin

WriteBin32:
	pushfd
    push ecx
    push eax

    mov ecx,32
	
WriteBin:

    push ebx
    push edi
	push esi

    cld
    mov edi,ioBuffer
    mov ebx,eax
    xor edx, edx
    
WriteBin.next_bit:
    ; convert bit to ASCII '0' or '1':
    rcl ebx,1
    setc al
    add al,'0'
    stosb
    ; store space every 4 characters:
    cmp dl, 3
    jnz  WriteBin.jumpOver4
    mov dl, -1
    mov al, ' '
    stosb
WriteBin.jumpOver4:
    inc dl
    ; store another every 8 characters:
    cmp dh, 7
    jnz  WriteBin.jumpOver8
    mov dh, -1
    mov al, '-'
    stosb
    mov al, ' '
    stosb
WriteBin.jumpOver8:
    inc dh    

    loop WriteBin.next_bit

	mov [edi], byte 0

	mov esi,ioBuffer
	call WriteString

	pop esi
    pop edi
    pop ebx
    pop eax
    pop ecx
    popfd
    ret
    
;----------------
; WriteFlags
; Vypise stav registru priznaku
;
WriteFlags:
    push eax
    push ebx
    push ecx
	push esi
	push edi

    pushfd
    pop ebx
    shl ebx,20

    mov ecx,12
    mov edi,msg_FlagValues
    
.cycle:
    rcl ebx,1
    setc al
    add al,'0'
    mov [edi],al
    add edi,3
    
    loop .cycle

	mov esi,msg_Flags
	call WriteString

	pop edi
	pop esi
    pop ecx
  	pop ebx
  	pop eax
    ret    
    
;----------------
; Funkce WriteIntX (8,16,32) {WriteInt8,WriteInt16,WriteInt32}
; Vypise 8-, 16-, 32-bitovou celociselnou hodnotu se znamenkem z registru AL, AX, EAX
;
;----------------
; Funkce WriteUIntX (8,16,32) {WriteUInt8,WriteUInt16,WriteUInt32}
; Vypise 8-, 16-, 32-bitovou celociselnou hodnotu bez znamenka z registru AL, AX, EAX
;

WriteInt8:
	push eax
	movsx eax,al
	jmp WriteInt32_noeax

WriteUInt8:
	push eax
	movzx eax,al
	jmp WriteUInt32_noeax

WriteInt16:
	push eax
	movsx eax,ax
	jmp WriteInt32_noeax 

WriteUInt16:
	push eax
	movzx eax,ax
	jmp WriteUInt32_noeax

WriteInt32:
	push eax
WriteInt32_noeax:
	push ecx
	push edx

	push eax
	push dword format_int
	call printf
	add esp,8

	pop edx
	pop ecx
	pop eax
    ret

WriteUInt32:
	push eax
WriteUInt32_noeax:
	push ecx
	push edx

	push eax
	push dword format_uint
	call printf
	add esp,8
	
	pop edx
	pop ecx
	pop eax
    ret   
    
