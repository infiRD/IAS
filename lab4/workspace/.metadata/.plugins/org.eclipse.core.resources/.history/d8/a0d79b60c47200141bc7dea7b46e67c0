; ========================================================== ;
;                                                            ;
; Task checker for IAS subject labs                          ;
;                                                            ;
; Version: 	v0.1                                             ;
; Date:		2014-11-23                                       ;
; Author: 	Martin Zamba (izamba@fit.vutbr.cz)               ;
;                                                            ;
; ========================================================== ; 

%ifndef IAS_CHECKER		; to avoid multiple inclusion
%define IAS_CHECKER		;

%include "libs\utils.asm"

; ========================================================== ; 
;                           Macros                           ;
; ========================================================== ; 

%macro check_task 1
	push EDX
	push %1
	call CheckTask
%endmacro

; ========================================================== ; 
;                          Variables                         ;
; ========================================================== ; 

[section .data use32 class=DATA] 	

sTask: 				db  "Task",0
sPaddedColon:	 	db  ": ",0
sFailed: 			db  "result check failed ! ",0
sNEQ:	 			db  "<>",0
sPassed: 			db  "pass",0
sErr_wrongTaskNum: 	db "ERROR: Wrong task number (",0

; ========================================================== ; 
;                         Functions                          ;
; ========================================================== ; 

[section .checker use32 class=CODE] 	

;----------------------------------------
; CheckTask(taskNum, result)
; 
; Will check result from given task against 
; globally visible 'dd results' array. Task 1
; has its result stored in [results+0] etc.
;
;----------------------------------------
CheckTask:
	push EBP          	; stack-frame enter (save EBP)
  	mov  EBP,ESP      	; stack-frame enter (EBP points to the top of the stack)
	
	; check taskNum for correctness (1..10)
	mov EAX, [EBP+8]	; param 1 (taskNum)
	cmp EAX, 10
	jg CheckTask.taskNumErr 	; not ok if > 10
	cmp EAX, 0
	jle CheckTask.taskNumErr	; not ok if <= 0
	jmp CheckTask.taskNumOk
CheckTask.taskNumErr:	
	mov ESI, sErr_wrongTaskNum
	call WriteString
	mov EAX, [EBP+8]			; param 1 (taskNum)
	call WriteInt32
	mov AL, ')'
	call WriteChar
	nl
	jmp CheckTask.return
CheckTask.taskNumOk:

	; display 
	mov ESI, sTask		
	call WriteString

	mov AL, ' '
	call WriteChar

	mov EAX, [EBP+8]	; param 1 (taskNum)
	call WriteInt8

	mov ESI, sPaddedColon
	call WriteString
	
	mov EAX, [EBP+12]	; param 2 (result)
	call WriteInt32
	
	
CheckTask.return:
	mov  ESP,EBP      	; stack-frame leave (restore ESP)
	pop  EBP          	; stack-frame leave (restore EBP)
	ret 8      			; remove 2 parameters from the stack
	
	
%endif				; to avoid multiple inclusion