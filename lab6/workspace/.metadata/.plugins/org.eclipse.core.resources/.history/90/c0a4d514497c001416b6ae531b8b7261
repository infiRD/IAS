; ================================================ 
;
; IAS, lab4
; Fri, 28.11.2014
;
; Author: ---- fill-in using format: xlogin00 ----
;
; ================================================

%include 'libs\utils.asm'
%include 'libs\checker.asm'

[section .data] 	; data segment definition

; Number sequence
%ifdef TEST
	seq: 		db 25, -5, 15, 20, 25, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15
	k:			db 6
	n:   		db 15
	results:	dd 4, 106, 
	
	substr:		db "kujem", 0
	str:		db "kujem, kujem podkovicku, konikovi na nozicku. kujem, kujem vesele, zo zeleza ocele", 0
	
 
%else
	;          THESE are data valid for normal run
	;           |
	;           v
	a: 			db 1, 2, \
				   3, 4	
	b:			db 1
	c:   		db 9
	
	substr:		db "ko", 0
	str:		db "kos kokosu"
	
	results:	dd 3, 10, 

%endif

[section .bss] 	; bss (uninitialised data) segment definition
	buffer:     resb    64
	nSubstr:    resb    1

[section .text use32 class=CODE] 	; basis segment definition

_prologue                			; macro -- program initialisation

; --------------------------------------------------------------------------------------------
; Assignment:
; - tasks 1..2 in the source code below
; - (!) do not edit/remove lines with comment ;--- at their end
; 
; --------------------------------------------------------------------------------------------

task_1:							;---
; vytvorte program na najdenie vsetkych podretazcov 'substr'
; v retazci 'str'. Pozicie podretazcov ulozte do 
 	; -- your code here ---


t1_check:						;---
	movzx EDX, byte [nSubstr]
	_check 1					;---

; spocitajte sumu vsetkych hodnot v buffri 'buffer' a vysledok 
; ulozte do EDX
 	; -- your code here ---
 	
	_check 2					;---
	jmp task_2

t1_routines:					;---
	; -- your code here ---





; --------------------------------------------------------------------------------------------

task_2:
; Using call/ret construct a subroutine to calculate product 
; of three signed 32bit integers stored in EAX, ECX, EDX 
; and store result in EDX register. Ignore overflow issues.
; This subroutine should start at label 'mul3'
; 
; Example1: EAX = -1
;			ECX = 10
;			EDX =  5
;           ...
;           result: EDX = -50
;
; At the 't2_check' label perform test of 'mul3' subroutine 
; using first 3 members of the 'seq' sequence lowered by 2
;
; Example1: seq: db 1, 5, -3
; 				   -1, 3, -5  (after lowering by 2) 
;           ...
;           result: EDX = 15
;
; (0.5 point)
;

; --------------------------------------------------------------------------------------------


_epilogue                			; macro -- program exit




